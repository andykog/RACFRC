diff --git a/README.md b/README.md
index 55da477..048199b 100644
--- a/README.md
+++ b/README.md
@@ -10,12 +10,12 @@ Proof of concept for using NSFetchedResultsController with [RAC-MutableCollectio
 ```swift
 class FilesViewModel {
 
-    lazy var files: MutableCollectionProperty<RACFRC.Section> = MutableCollectionProperty([])
+    lazy var files: MutableCollectionProperty<RACFRCSection<File>> = MutableCollectionProperty([])
     
     lazy var frc: NSFetchedResultsController? = {
         guard let moc = AuthService.userStorage?.managedObjectContext else { return nil }
-            
-        NSFetchedResultsController.deleteCacheWithName(self.frcCacheName)
+        
+        NSFetchedResultsController.deleteCacheWithName("Files")
         
         let fetchRequest = NSFetchRequest()
         fetchRequest.entity = NSEntityDescription.entityForName("File", inManagedObjectContext: moc)
@@ -35,11 +35,11 @@ class FilesViewModel {
         
         return fetchedResultsController
     }()
-
+    
     lazy var frcBridge: RACFRC = RACFRC(frc: self.frc, property: self.files)
     
     init() {
-      
+        
     }
 
 }
@@ -49,16 +49,18 @@ Use `files.changes` signal producer as you want. For example:
 
 
 ```swift
-class FilesViewController {
+class FilesViewController: UIViewController {
 
+    @IBOutlet weak var tableView: UITableView!
+ 
     private let disposables = CompositeDisposable()
     
     deinit {
         self.disposables.dispose()
     }
-
+    
     let viewModel = FilesViewModel()
-
+    
     func handleChange(change: MutableCollectionChange) {
         switch change {
         case .Remove(let (indexPath, _)):
@@ -81,7 +83,7 @@ class FilesViewController {
             self.tableView.endUpdates()
         }
     }
-
+    
     override func viewDidLoad() {
         super.viewDidLoad()
         
@@ -94,7 +96,7 @@ class FilesViewController {
     func configureCellFunc(cell: UITableViewCell, populateWith object: NSManagedObject) {
         switch (cell, object) {
         case let (cell as UITableViewCell, file as File):
-            cell.textLabel?.text = file.name
+            cell.textLabel?.text = file.fileName
             break
         default:
             break
@@ -110,12 +112,12 @@ extension FilesViewController: UITableViewDataSource {
     }
     
     func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
-        return self.viewModel.files.value[section].count
+        return self.viewModel.files.value[section].value.count
     }
     
     func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
         let cell = UITableViewCell()
-        let file: File = self.viewModel.files.objectAtIndexPath(indexPath)
+        let file = self.viewModel.files[indexPath.section][indexPath.row]
         self.configureCellFunc(cell, populateWith: file)
         return cell
     }
